! TinyDisp - A very simple ultrasonic anemometer flow visualization
!            tool, showing (in 2D) effects of both long-range
! transport and turbulent diffusion.
!
! Data are assumed to be coming from a set of ultrasonic
! anemometer files stored in a dedicated form (for now).
!
! TinyDisp follows the NanoPart idea, but with important
! simplifications aimed at improving speed, at the cost of
! a dramatic reduction of scientific capability.
!
! Let me say, this is something interesting didactically:
! no research purposes.
!
! Copyright 2020 by Patrizia M. Favaron
!
! This is open-source code, covered by the MIT license.
!
program TinyDisp
    
    ! Computer science:
    use omp_lib
    use appgraphics
    ! GUI:
    use Controls
    use DotPlot
    ! Physics:
    use Particles
    use Config
    
    implicit none
    
    ! Locals
    integer                             :: iRetCode
    integer                             :: i
    integer                             :: iNumPart
    integer                             :: myscreen
    character(len=256)                  :: sCfgFile
    type(ConfigType)                    :: tCfg
    type(PointType)                     :: tPlt
    type(ParticlePoolType)              :: tPart
    integer, dimension(:), allocatable  :: ivTimeStamp
    real, dimension(:), allocatable     :: rvU
    real, dimension(:), allocatable     :: rvV
    real, dimension(:), allocatable     :: rvStdDevU
    real, dimension(:), allocatable     :: rvStdDevV
    real, dimension(:), allocatable     :: rvCovUV
    
    ! Get parameters
    if(command_argument_count() /= 1) then
        print *, "TinyDisp - Local airflow visualizer for ultrasonic anemometer data"
        print *
        print *, "Usage:"
        print *
        print *, "    TinyDisp <CfgFile>"
        print *
        print *, "Copyright 2020 by Servizi Territorio srl"
        print *, "This is open-source software, covered by the MIT license."
        print *
        stop
    end if
    call get_command_argument(1, sCfgFile)
    
    ! Initialize random number generator based on date and time
    call init_random()
    
    ! Read configuration
    iRetCode = tCfg % gather(10, sCfgFile)
    if(iRetCode /= 0) then
        print *, "Invalid configuration"
        stop
    end if
    
    myscreen = initwindow( &
        1280, 720, &
        title = "TinyDisp - Airflow Visualizer for Ultrasonic Anemometer", &
        dbflag = .true., closeflag = .true. &
    )
    call disableresize()
    
    ! Configure drawing environment
    call setcolor(WHITE)
    call setfillstyle(SOLID_FILL, WHITE)
    call setbkcolor(BLACK)
    call setmatchthemetextstyle()
    call setviewport(0,0,719,719,.true.)
    
    ! Sample meteorology at the points desired
    iRetCode = tCfg % get_meteo(ivTimeStamp, rvU, rvV, rvStdDevU, rvStdDevV, rvCovUV)
    if(iRetCode /= 0) then
        print *, "Meteo data not accessed"
        stop
    end if
    
    ! Initialize plotting window
    iRetCode = tPlt % Init( &
        720, 720, &
        -tCfg % rEdgeLength / 2., tCfg % rEdgeLength / 2., &
        -tCfg % rEdgeLength / 2., tCfg % rEdgeLength / 2.  &
    )
    if(iRetCode /= 0) then
        print *, "Plot window not initialized"
        stop
    end if
    
    ! Initialize the particle pool
    iNumPart = tCfg % get_num_particles()
    allocate( &
        rvDelta(iNumPart), &
        lvPartIsActive(iNumPart), &
        rvPartX(iNumPart), &
        rvPartY(iNumPart), &
        rvPartU(iNumPart), &
        rvPartV(iNumPart)  &
    )
    
    ! Main loop: Iterate over meteorology
    do i = 1, size(ivTimeStamp)
        rvPartX = -tCfg % rEdgeLength / 2. + tCfg % rEdgeLength * float(i-1) / float(size(ivTimeStamp) - 1)
        call RANDOM_NUMBER(rvDelta)
        rvPartX = 10. * rvPartX * rvDelta
        rvPartY =  rvPartX
        call RANDOM_NUMBER(rvDelta)
        rvPartY = 10. * rvPartY * rvDelta
        iRetCode = tPlt % show(rvPartX, rvPartY)
    end do
    
    ! Wait until window is closed
    call loop()
    call closewindow(myscreen)
    
    ! Leave
    deallocate(rvDelta, lvPartIsActive, rvPartX, rvPartY, rvPartU, rvPartV)

contains
    
    subroutine init_random()
    
        ! Routine arguments
        ! -none-
        
        ! Locals
        integer, dimension(:), allocatable  :: seed
        integer                             :: values(8), k
        
        ! Seed the random number generator using current date and time
        call date_and_time(values=values)
        call random_seed(size=k)
        allocate(seed(k))
        seed = values(8)
        call random_seed(put=seed)
        
    end subroutine init_random
    
end program TinyDisp

